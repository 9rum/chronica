// Copyright 2022 Sogang University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// The messages and services in this file describe the definitions for
// communicating with Chronica's scheduler.

syntax = "proto3";

package communicator;

import "google/protobuf/empty.proto";

option go_package = "github.com/9rum/chronica/communicator";

enum Schedule {
  STATIC = 0;
  DYNAMIC = 1;
}

message InitRequest {
  int64 rank = 1;
  int64 batch_size = 2;
  repeated int64 sizes = 3;
  repeated int64 groups = 4;
  optional bool partition = 5;
  optional Schedule type = 6;
}

message BcastRequest {
  int64 epoch = 1;
  int64 rank = 2;
  optional double coefficient = 3;
  optional double intercept = 4;
}

message BcastResponse {
  repeated int64 indices = 1;
}

service Communicator {
  // RPC for initializing training environment.
  rpc Init(InitRequest) returns (google.protobuf.Empty) {}

  // RPC for broadcasting schedule to all workers.
  rpc Bcast(BcastRequest) returns (BcastResponse) {}

  // RPC for terminating training environment.
  rpc Finalize(google.protobuf.Empty) returns (google.protobuf.Empty) {}
}
